cxf:
  path: /demo/services
  servlet:
    load-on-startup: 0
server:
  port: 80
  servlet:
    context-path: /
spring:
  application:
    name: demo
  rabbitmq:
    host: 192.168.0.110
    port: 5672
    username: root
    password: baifujun
    virtual-host: /
    publisher-returns: true
    publisher-confirm-type: correlated
    listener:
      direct:
        acknowledge-mode: manual
  datasource:
    url: jdbc:mysql://localhost:3306/springboot?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2B8
    username: baixs
    password: baifujun
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
  redis:
    database: 0
    host: 127.0.0.1
    port: 6379
    password:
    lettuce:
      pool:
        max-active: 8
        max-idle: 4
        min-idle: 0
        max-wait: -1
  data:
    mongodb:
      #uri: mongodb://localhost/testdb
      host: localhost
      port: 27017
      database: testdb
      #username:
      #password:
  servlet:
    multipart:
      max-file-size: 500MB
      max-request-size: 1000MB
  quartz:
    job-store-type: jdbc
    jdbc:
      initialize-schema: always
    wait-for-jobs-to-complete-on-shutdown: true
    properties:
      org:
        quartz:
          datasource:
            driver-class-name: com.mysql.cj.jdbc.Driver
            url: jdbc:mysql://localhost:3306/springboot?useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2B8
            username: baixs
            password: baifujun
          scheduler:
            instancName: clusteredScheduler
            instanceId: AUTO
          jobStore:
            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate #StdJDBCDelegate说明支持集群
            tablePrefix: qrtz_
            isClustered: true
            clusterCheckinInterval: 1000
            useProperties: false
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 5
            threadPriority: 2
  elasticsearch:
    rest:
      uris: http://192.168.0.110:9200,http://192.168.0.110:9201,http://192.168.0.110:9202
  kafka:
    bootstrap-servers: 192.168.0.110:9092,192.168.0.110:9093,192.168.0.110:9094
    consumer:
      group-id: baixs-kafka-consumer-group
      client-id: baixs-kafka-consumer-1
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      max-poll-records: 10
      auto-offset-reset: latest
      enable-auto-commit: true
      auto-commit-interval: 1000
    producer:
      retries: 5
      acks: all
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      properties:
        partitioner:
          class: com.baixs.demo.config.CustomizePartitioner
      transaction-id-prefix: 123
    listener:
      missing-topics-fatal: false
      type: single
mybatis:
  config-location: classpath:mybatis/mybatis-config.xml
  mapper-locations: classpath:mapper/**/*Mapper.xml
  type-aliases-package: com.baixs.demo.domain
  configuration:
    map-underscore-to-camel-case: true